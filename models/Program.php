<?php
namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use app\models\Rookie1;
use app\models\Rookie2;
use app\models\Iteration1;
use app\models\Iteration2;
use app\models\Score;
use app\models\Match;
use yii\db\Query;

class Program extends ActiveRecord{
    private $class_match;
    private $class_score;
    private $class_rookie1=null;
    private $class_rookie2=null;
    private $class_iteration1=null;
    private $class_iteration2=null;

    function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->class_match=new Match;
        $this->class_score=new Score;
    }


    public function get_result($mode_type,$program,$weights=array(),$match_params=array()){
        $class_system=new System;
        if(count($weights)===0){ // 使用系统默认权重
            $system_weights=$class_system->get_default_weights($mode_type);
            if(count($system_weights)===0){return false;}
            $weights=$this->get_weights($program,$system_weights);
            if($weights===false){return false;}
        }

        if($class_system->check_weights_total($weights)===false){return false;}

        $score=$this->get_score($mode_type,$program,$weights,$match_params);

        $data=$score;

        $actor=array();
        if($program["male_leader"]!=-1&&$program["male_leader"]!=""){
            $actor[]=$program["male_leader"];
        }
        if($program["female_leader"]!=-1&&$program["female_leader"]!=""){
            $actor[]=$program["female_leader"];
        }

        $pic=$this->get_poster_src($program["program_default_name"],$program["platform_name"]);

        $data["program_name"]=$program["tensyn_name"];
        $data["program_pic_src"]=$pic;
        $data["property_name"]=$program["property_name"];
        $data["platform_name"]=$program["platform_name"];
        $data["program_id"]=$program["program_id"];
        $data["mode_type"]=$mode_type;
        $data["type_name"]=$program["type_name"];
        $data["start_play"]=$program["start_play"];
        $data["actor"]=count($actor)>0?implode("/",$actor):"";
        $data["team"]=$program["team"];
        $data["play1"]=$program["play1"];
        $data["tensyn_name"]=$program["tensyn_name"];
        return $data;
    }
    public function get_list($filters=[]){
        $programs=Program::find()
            ->select("*")
            ->leftJoin("score s","program.program_id=s.program_id");
        $programs=$this->_make_sql_where($programs,$filters);
        $programs=$programs->asArray()->all();
        return $programs;
    }
    public function get_weights($program,$usable_weights){
        $data=array();
        $valid_weights=$this->get_valid_weights($program);
        if(count($valid_weights)===0){
            return false;
        }else{
            $weights=$this->remake_weights($valid_weights,$usable_weights);
            foreach($weights as $w){
                if($w["value"]==""){continue;}
                $data[$w["html_id"]]=$w["value"];
            }
            return $data;
        }
    }
    public function get_valid_weights($program){
        $valid_fields=array();
        $system_fields=array();
        switch($program["property_name"]){
            case "新秀自制综艺":
                if($this->class_rookie1===null){
                    $this->class_rookie1=new Rookie1();
                }
                $system_fields=$this->class_rookie1->get_fields();
                break;
            case "新秀自制剧":
                if($this->class_rookie2===null){
                    $this->class_rookie2=new Rookie2();
                }
                $system_fields=$this->class_rookie2->get_fields();
                break;
            case "迭代自制综艺":
                if($this->class_iteration1===null){
                    $this->class_iteration1=new Iteration1();
                }
                $system_fields=$this->class_iteration1->get_fields();
                break;
            case "迭代自制剧":
                if($this->class_iteration2===null){
                    $this->class_iteration2=new Iteration2();
                }
                $system_fields=$this->class_iteration2->get_fields();
                break;
        }

        if(count($system_fields)>0){
            foreach($system_fields as $field_name=>$field_array){
                foreach($field_array["fields"] as $field){
                    if($program[$field]!=-1){
                        $valid_fields[]=$field_name;
                        continue 2;
                    }
                }
            }
        }
        return $valid_fields;
    }
    public function remake_weights($program_weights,$system_weights){
        $total_weights=0;
        $program_weights_count=0;
        $system_weights_count=count($system_weights);

        foreach($system_weights as $sw){
            if(in_array($sw["html_id"],$program_weights)){
                $total_weights+=intval($sw["value"]);
                $program_weights_count++;
            }
        }

        if($total_weights!==100){
            if((100-$total_weights)%$program_weights_count===0){
                $offset=0;
            }else{
                $offset=1;
            }
            $avg_weight=floor((100-$total_weights)/$program_weights_count);
            $count_left=$program_weights_count-1;
            $weight_left=100;
            for($i=0;$i<$system_weights_count;$i++){
                if(in_array($system_weights[$i]["html_id"],$program_weights)){
                    if($system_weights[$i]["value"]==0){continue;}
                    $weight_left=$weight_left-$system_weights[$i]["value"]-$avg_weight-$offset;
                    $new_value=$system_weights[$i]["value"]+$avg_weight+$offset;
                    $system_weights[$i]["value"]=$new_value;
                    if($offset!==0&&$weight_left%$count_left===0){$offset=0;}
                    $count_left--;
                }else{
                    $system_weights[$i]["value"]="";
                }
            }
        }
        return $system_weights;
    }
    public function get_score($mode_type,$program,$weights,$match_weights=array()){
        $result=array();
        if($mode_type==1||$mode_type==2){
            $match_score=false;
            if($mode_type==2&&count($match_weights)>0){
                $match_score=$this->class_match->get_score($mode_type,$program,$match_weights);
            }
            $result=$this->class_score->get_score($program,$weights,$match_score);
        }
        return $result;
    }
    public function get_recommend_programs($program_id,$property_name,$score_min,$score_max){
        return Program::find()
            ->select("program.program_id,program.program_name,program.property_name,program.platform_name,program.type_name,s.score")
            ->leftJoin("score s","program.program_id=s.program_id")
            ->where(['!=','program.program_id',$program_id])
            ->andWhere(['=','program.property_name',$property_name])
            ->andWhere(['>=','s.score',$score_min])
            ->andWhere(['<=','s.score',$score_max])
            ->orderBy('s.score DESC')
            ->limit(2)
            ->asArray()->all();
    }
    public function get_poster_src($program_default_name,$platform){
        $r=(new Query)
            ->select('*')
            ->from('media_attach')
            ->where(["program_default_name"=>$program_default_name,"platform"=>$platform,"type"=>"poster"])
            ->one();
        if($r===false){
            return "";
        }else{
            return Yii::getAlias('@upload').$r["url"];
        }
    }

    private function _make_sql_where($programs,$filters){
        if(count($filters)>0){
            foreach($filters as $k=>$v){
                $v=trim($v);
                if($v===""){continue;}
                switch($k){
                    case "program_name": // 剧目名称
                    case "type_name": // 内容类型
                        $programs=$this->_make_where($programs,$v,$k,"like");
                        break;
                    case "program_id":
                        $programs=$this->_make_where($programs,$v,"program.program_id","=");
                        break;
                    case "platform_name": // 媒体平台
                    case "property_name": // 内容属性
                        $programs=$this->_make_where($programs,$v,$k,"=");
                        break;
                    case "type1": // 一级类型
                        $programs=$this->_make_where($programs,$v,"type_name","like",true);
                        break;
                    case "type2": // 二级类型
                        $programs=$this->_make_where($programs,$v,"type_name","like");
                        break;
                    case "start_play": // 开播时间
                        $programs=$this->_make_where_start_play($programs,$v);
                        break;
//                    case "program_ids":
//                        $programs=$this->_make_where($programs,$v,"program_id","=");
//                        break;
                }
            }
        }
        return $programs;
    }
    private function _make_where($class,$data,$field,$symbol,$like_side=false){
        $or=["or"];
        $temp=explode(",",$data);
        foreach($temp as $t){
            if($like_side){
                $or[]=[$symbol,$field,$t."%",false];
            }else {
                $or[] = [$symbol, $field, $t];
            }
        }
        $class->andWhere($or);
        return $class;
    }
    private function _make_where_start_play($class,$data){
        $or=["or"];
        $temp=explode(",",$data);
        foreach($temp as $t){
            $length=mb_strlen($t);
            if($length===5){
                $symbol="like";
            }else{
                $symbol="=";
            }
            $or[]=[$symbol,"start_play",$t];
        }
        $class->andWhere($or);
        return $class;
    }
}
?>
